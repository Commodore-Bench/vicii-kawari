; C128 VDC 80-column driver - 28 lines

.lst "novaterm.src.lab"

rvs = $c7

LINES = 25

; Bytes to enable VICII-Kawari extensions
CHAR_V = 86
CHAR_I = 73
CHAR_C = 67
CHAR_2 = 50

; Some VICII-Kawari registers
KAWARI_VMODE1 = $d037
KAWARI_VMODE2 = $d038
KAWARI_PORT = $d03f

; Kawari video memory port A regs
VMEM_A_IDX = $d035
VMEM_A_HI = $d03a
VMEM_A_LO = $d039
VMEM_A_VAL = $d03b

; Kawari video memory port B regs
VMEM_B_IDX = $d036
VMEM_B_HI = $d03d
VMEM_B_LO = $d03c
VMEM_B_VAL = $d03e

*= column
        jmp enter80     ; 0
        jmp outchr      ; 3
        rts : .byt 0,0            ; blink
        jmp exit80      ; 9
        jmp calcloc     ; 12
        jmp scroll      ; 15
        jmp insert      ; 18
        jmp erase       ; 21
        jmp putchar     ; 24
;
nopros	.byt 0   ; 27
under   .byt 0   ; 28
color80 .byt 7   ; 29
border80 .byt 0  ; 30
sctop   .byt 1   ; 31
scbot   .byt LINES-1  ; 32
blink	.byt 0   ; 33
lines	.byt LINES   ; 34
scrlahd	.byt 255 ; 35
fstyle	.byt 1	 ; 36         ; tell novaterm we want font81.*
initialized .byt 0	; 37

	jmp clrtoeol	; 38
	jmp clrfrombol	; 41
	jmp setattr	; 44
	jmp specattr	; 47
	jmp fastmode	; 50
	jmp saveattr	; 53
	jmp restattr	; 56

; Row locations in kawari memory space
rowlo   .byt <$1000,<$1050,<$10a0,<$10f0,<$1140,<$1190,<$11e0,<$1230,<$1280
	.byt <$12d0,<$1320,<$1370,<$13c0,<$1410,<$1460,<$14b0,<$1500,<$1550
	.byt <$15a0,<$15f0,<$1640,<$1690,<$16e0,<$1730,<$1780
rowhi   .byt >$1000,>$1050,>$10a0,>$10f0,>$1140,>$1190,>$11e0,>$1230,>$1280
	.byt >$12d0,>$1320,>$1370,>$13c0,>$1410,>$1460,>$14b0,>$1500,>$1550
	.byt >$15a0,>$15f0,>$1640,>$1690,>$16e0,>$1730,>$1780

initchip .byt 0
trow	.byt 0
tcol	.byt 0
attr	.byt 7

; red,green,blue values for ANSII colors
ansi .byt 0,0,0,0,51,0,0,0,19,38,1,0,49,40,0,0,28,39,51,0,29,20,30,0,1,38,38,0,52,53,51,0,21,21,20,0,59,10,10,0,34,56,13,0,63,58,19,0,12,43,63,0,43,31,42,0,13,56,56,0,63,63,63,0

commodore .byt 0,0,0,0,63,63,63,0,26,13,10,0,28,41,44,0,27,15,33,0,22,35,16,0,13,10,30,0,46,49,27,0,27,19,9,0,16,14,0,0,38,25,22,0,17,17,17,0,27,27,27,0,38,52,33,0,27,23,45,0,37,37,37,0

fonttmp .byte 0
mapsave .byte 0
fontcpycnt .byte 0

; Sets vmem ptr A with addr [y][x]
setvdcaddr = *
        stx VMEM_A_LO
	sty VMEM_A_HI
	rts

; Sets vmem ptr B with addr [y][x]
setblkaddr = *
	stx VMEM_B_LO
	sty VMEM_B_HI
	rts

specattr = *
	and #$f0
	lsr
	lsr
	lsr
	lsr
	sta color80

setattr	pha
	lda color80
	and #$0f
	bne +
	lda color80
	and #$f0
	beq +
	lsr
	lsr
	lsr
	lsr
	ora #$40
	bne setattr1
+	
setattr1 ldx blink
	beq +
	ora #$10
+	ldx under
	beq +
	ora #$20
+	ldx rvs
	beq +
	ora #$40
+	sta attr
	pla
	clc
	rts

fastmode = *
	; no fast mode but
	; kawari already disables badlines in hires modes
	rts

exit80	ldx 214
	ldy 211
	stx trow
	sty tcol

	ldx #0
	jsr erase
	ldy #28
	sty 211
	jsr calcreg
	lda #$3f
	sta attr

+	inc update80

	; install commodore colors
	lda #>commodore
	sta $5e
	lda #<commodore
	sta $5d
	jsr set_colors

	lda #0
        sta KAWARI_VMODE1
        lda #0
        sta KAWARI_VMODE2
	lda #0
	sta KAWARI_PORT
	rts

enter80	bit initchip
	bmi ++
	; one time initialzation to activate kawari and setup 80 col mode
        ; Enable VICII-Kawari extensions
        lda #CHAR_V
        sta KAWARI_PORT
        lda #CHAR_I
        sta KAWARI_PORT
        lda #CHAR_C
        sta KAWARI_PORT
        lda #CHAR_2
        sta KAWARI_PORT

++
        lda #$00
        sta VMEM_A_IDX
        sta VMEM_B_IDX
        sta VMEM_A_HI
        sta VMEM_A_LO

	lda #1      ; auto inc port a
        sta KAWARI_PORT

	sei
	lda $01		; store current mem map value
	sta mapsave

	; copy 2048 bytes into both upper/gfx and upper/lower
	; areas. So we need 2 loops
	lda #0
	sta fontcpycnt

	lda #$00        ; dest $0000
	sta VMEM_A_HI
	lda #00
	sta VMEM_A_LO

fontcpy
	lda #>font80 ; high byte font80
	sta $5e
	lda #<font80 ; low byte font80
	sta $5d

	ldx #8 ; loop 8 times for 2048 bytes
	ldy #0
init_loop1
	; This is a very inefficient copy of character data
	; into vmem but we only do it once.
	lda #$30	; make font mem visible
	sta $01
	lda ($5d),y
	sta fonttmp
	lda mapsave	; back to i/o map
	sta $01
	lda fonttmp
	sta VMEM_A_VAL
	iny
	bne init_loop1
	inc $5e
	dex
	bne init_loop1

	; copy 2x2048 bytes
	lda fontcpycnt
	adc #1
	sta fontcpycnt
	cmp #2
	bne fontcpy

	; back to original mem map value
	lda mapsave
	sta $01
	cli

	; install ANSI colors
	lda #>ansi
	sta $5e
	lda #<ansi
	sta $5d
	jsr set_colors

	ldx #0
	jsr getloc

	lda #0      ; clear mem flags
        sta KAWARI_PORT

	lda #$ff
	sta initchip

	lda #16            ; uuu:hres:pal:cp  uuu:1:0:000 $0000
        sta KAWARI_VMODE1
        lda #50            ; col:mat = 0011:0010 $1800:$1000
        sta KAWARI_VMODE2
	
	bit initialized
	bmi +

	jsr clear

	lda #$ff
	sta initialized
	bne ++
+	ldx trow
	ldy tcol
	stx 214
	sty 211
++	jsr setattr

calcrsr ldx 214
calcloc ldy 211
calcreg cpy #80
	bcc +
	dey
+	jsr getloc
	clc
	tya
	adc loc
	sta loc
	bcc +
	inc loc+1
+	clc
	tya
	adc coloc
	sta coloc
	bcc +
	inc coloc+1
+	jmp setcursor

; set colors from ($5d)
set_colors
	lda #32
	sta KAWARI_PORT ; make regs visible
	lda #0
	sta VMEM_A_LO
	sta VMEM_A_HI
	ldy #0
restcol
	lda ($5d),y
	sta VMEM_A_VAL
	inc VMEM_A_LO
	iny
	tya
	cmp #64
	bne restcol

	lda #0
	sta KAWARI_PORT ; no regs
	rts

insert  cpx sctop
        bcc delall2
        cpx scbot
        beq insert00
        bcs delall2
insert00 sta $5e
        stx $5c
        jsr delall
        ldx scbot
insert0 txa
        sec
        sbc $5e
        jsr adv
        dex
        cmp $5c
        bne insert0
insert3 ldx 214
        jmp scroll3
;
delall  txa
        clc
        adc $5e
        cmp scbot
        bcc delall2
        beq delall2
delall1 jsr erase
        inx
        cpx scbot
        bcc delall1
        beq delall1
        pla
        pla
delall2 rts
;
down    ldy 214
        cpy scbot
        beq down1
        cpy #LINES-1
        bcc down2
        beq down2b
down1   lda #1
	bit scrlahd
	bpl down10
	sta $5d

	sec
	lda scbot
	sbc sctop
	cmp minscroll
	bcc ++

	ldy rhead
	cpy rtail
	beq ++
-	lda recbuf,y
	tax
	lda rectab,x
	cmp #10
	bne +
	inc $5d
+	iny
	cpy rtail
	bne -
++	lda $5d
	cmp #1
	beq down10
	cmp #12
	bcc +
	lda #12
+       tay
	dey
-       dec 214
	dey
	bne -
down10	ldx sctop
        jsr scroll
        sec
	rts
down2   inc 214
down2b  sec
        rts
;
getloc  lda rowlo,x
        sta loc
	sta coloc
        lda rowhi,x
        sta loc+1
	ora #8
	sta coloc+1
-	rts
;
scroll  cpx sctop
        bcc -
        cpx scbot
        beq +
        bcs -
+	sta $5e
        jsr delall          ; in case .X is at the bottom already
scroll0 txa
        clc
        adc $5e
        jsr adv
        inx
        cmp scbot
        beq scroll3
        cmp #LINES-1
        bcc scroll0
;scroll2c cmp 214
;        bcc scroll0
scroll3 jsr erase
        inx
        dec $5e
        bne scroll3
        jmp calcrsr
;
outchr  sta $d7
        pha
        txa
        pha
        tya
        pha
        lda $d7
        jsr proschr
	bcc outchr1
        jsr calcrsr
outchr1 pla
        tay
        pla
        tax
        pla
        rts

proschr pha
        and #$7f
        cmp #" "    ; control character
        pla
	beq clcrts
        bcc outchr3
nproschr jsr putch0
        jmp rtcrsr

outchr3 cmp #10     ; linefeed
        bne chr0
        jmp down

chr0	cmp #13
	beq return
	bit nopros
	bmi chr1
        cmp #141
        bne chr1
return  lda #0
        sta 211
-
+	sec
	rts

chr1    cmp #9      ; tab
        bne chr1g
        ldx 211
-       inx
        cpx #80
        bne +
clcrts	clc
	rts
+       lda tabs,x
        beq -
        stx 211
secrts  sec
        rts

chr1g	cmp #7		; bell
	bne chr1d
	jmp bell	; bell clears carry

chr1d	cmp #8		; backspace
	beq cleft_j

chr2    cmp #12
	beq clear
	bit nopros
	bmi nproschr
	cmp #147    ; clear-home
        bne chr3
;
clear	inc update80
        ldx #LINES-1
clear1	jsr erase
        dex
        bpl clear1
        jmp home

cleft_j jmp cleft

chr3    cmp #17     ; cursor down
        bne chr4
        ldx 214
        cpx scbot
        beq secrts
        cpx #LINES-1
        beq secrts
        inc 214
        bne secrts

chr4	cmp #29     ; cursor right
        bne chr5
        jsr advdown
rtcrsr  inc 211
        lda 211
        cmp #80
        beq setcursor
	inc loc
	bne +
	inc loc+1
+	inc coloc
	bne +
	inc coloc+1
+
setcursor = *
	lda #32          ; make registers visible
	sta KAWARI_PORT
	lda #$85         ; cursor lo byte
	sta VMEM_A_LO
	lda loc
	sta VMEM_A_VAL
	lda #$86         ; cursor hi byte
	sta VMEM_A_LO
	lda loc+1
	sta VMEM_A_VAL
	lda #0           ; back to video mem
	sta KAWARI_PORT
	
clcrts0	clc
	rts

chr5    cmp #145    ; cursor up
        bne chr6
        lda 214
        cmp #1
        beq clcrts0
        dec 214
        sec
        rts

chr6    cmp #157    ; cursor left
        bne chr7
cleft	lda 211
	beq clcrts0
        dec 211
        sec
	rts

chr7	jsr 59595
        bmi chr8
	lda color80
	and #$f0
	ora 646
	sta color80
	bpl ++

chr8    cmp #18     ; reverse on
        bne chr9
	lda #$ff
	bne +

chr9    cmp #146    ; reverse off
        bne chr10
        lda #0
+       sta rvs
++	jmp setattr

chr10   cmp #148    ; insert
        beq +
        jmp chk80
+       lda 211
        cmp #79
        bcs chr3i

	sec
	lda #78   ; one less so we don't insert onto next line
	sbc 211
	pha

	jsr setlocblk

	inc loc
	bne +
	inc loc+1
+	jsr setlocvdc

	; A has num to copy
	pla
	pha
	tax
ins_1
	stx VMEM_A_IDX
	stx VMEM_B_IDX
	lda VMEM_B_VAL
	sta VMEM_A_VAL
	dex
	bpl ins_1

	jsr setcolblk

	inc coloc
	bne +
	inc coloc+1
+	jsr setcolvdc

	pla
	tax
ins_2
	stx VMEM_A_IDX
	stx VMEM_B_IDX
	lda VMEM_B_VAL
	sta VMEM_A_VAL
	dex
	bpl ins_2

	jsr calcrsr
chr3i	lda #" "
	jsr putchar
	sec
	rts

setlocvdc = *
	ldx loc
	ldy loc+1
	jmp setvdcaddr

setcolvdc = *
	ldx coloc
	ldy coloc+1
	jmp setvdcaddr

setlocblk = *
	ldx loc
	ldy loc+1
	jmp setblkaddr

setcolblk = *
	ldx coloc
	ldy coloc+1
	jmp setblkaddr

chk80   ldx 211
        cpx #80
        bcc chr14
        dec 211

chr14	cmp #11	    ; clear to eol
	bne chr11
	jmp clrtoeol

chr11   cmp #19     ; home
        bne chr12
home	lda #0
        sta 211
        sta 214
        inc 214
	sec
        rts

chr12   cmp #20     ; delete
        beq +
-	clc
	rts

+       lda 211
        beq -

	; back space the cursor x
	dec 211
	jsr calcrsr

	jsr setlocvdc

	inc loc
	bne +
	inc loc+1
+	jsr setlocblk

	sec
	lda #79
	sbc 211
	; save the num to copy from A
	pha

	; do the copy from blk to dvdc incrementing
	tax 

	; auto inc both ptrs
	lda #5
	sta KAWARI_PORT
del_2
	lda VMEM_B_VAL
	sta VMEM_A_VAL
	dex	
	bpl del_2

	; now same for color mem

	jsr setcolvdc

	inc coloc
	bne +
	inc coloc+1
+	jsr setcolblk

	pla

	tax
del_3
	lda VMEM_B_VAL
	sta VMEM_A_VAL
	dex	
	bpl del_3

	; back to no inc
	lda #0
	sta KAWARI_PORT

	ldx 214
	ldy #79
	jsr calcreg
	lda #" "
	jsr putchar
	sec
	rts

advdown ldx 211
        cpx #80
        bcc adv1
        pha
        lda #0
        sta 211
        jsr down
        jsr calcrsr
        pla
adv1    rts

putch0  jsr advdown
putchar sta $d7

	jsr setlocvdc

	lda $d7
	sta VMEM_A_VAL

	jsr setcolvdc

	lda attr
	sta VMEM_A_VAL
	rts
;
clrtoeol = *
	lda 211
	bne +
clrerase ldx 214
	jmp erase

; clear to end of line
+	cmp #80
	bcc +
	dec 211
+	jsr calcrsr
	jsr setlocvdc

	sec
	lda #79
	sbc 211
	beq +
	bmi +

	tax
	lda #" "
clend1
	stx VMEM_A_IDX
	sta VMEM_A_VAL
	dex
	bpl clend1

+	jsr setcolvdc

	lda #7 ; white
	sta VMEM_A_VAL

	sec
	lda #79
	sbc 211
	beq +
	bmi +
	
	tax
	lda #7 ; white
clend2
	stx VMEM_A_IDX
	sta VMEM_A_VAL
	dex
	bpl clend2

+	clc
	rts

clrfrombol = *
	lda 211       ; esc [1K
        cmp #79
        bcs clrerase

	ldx 214
	clc
	jsr setupdaddr

	lda 211
	beq +

	tax
	lda #" "
clrfrom_2;
	stx VMEM_A_IDX
	sta VMEM_A_VAL
	dex
	bpl clrfrom_2;

+	ldx 214
	sec
	jsr setupdaddr

	lda 211
	beq +
	tax
	lda #7 ; white
clrfrom_3:
	stx VMEM_A_IDX
	sta VMEM_A_VAL
	dex
	bpl clrfrom_3

+	jmp calcrsr
;
setblockaddr = *
	lda rowlo,x
	sta VMEM_B_LO
	lda rowhi,x
	sta VMEM_B_HI
	bcc +
	ora #8           ; add 2048 for color ram
	sta VMEM_B_HI
+	rts
;
setupdaddr = *
	lda rowlo,x
	sta VMEM_A_LO
	lda rowhi,x
	sta VMEM_A_HI
	bcc +
	ora #8           ; add 2048 for color ram
	sta VMEM_A_HI
+	rts
;
fill80 = *
	ldy #79
fill80_1
	sty VMEM_A_IDX
	sta VMEM_A_VAL
	dey
	bpl fill80_1
	; this should leave IDX = 0
	rts

	; copy from ptr B to ptr A
copy80 = *
	ldx #79
copy80_1
	stx VMEM_B_IDX
	stx VMEM_A_IDX
	lda VMEM_B_VAL
	sta VMEM_A_VAL
	dex
	bpl copy80_1
	rts

; Copy line .A to line .X

adv     stx $5d
	sta $5f

; scroll text

	clc
	jsr setupdaddr   ;dest ptr

	ldx $5f		; copy ending line into update address
	clc
	jsr setblockaddr ; from ptr

	jsr copy80

; scroll attributes

	ldx $5d
	sec
	jsr setupdaddr  ; dest ptr

	ldx $5f		; copy ending line into update address
	sec
	jsr setblockaddr ; from ptr

	jsr copy80

	ldx $5d
	lda $5f
	rts

; Erase line in .X register

erase	stx $5d

	clc
	jsr setupdaddr

	lda #" "
	jsr fill80

	ldx $5d
	sec
	jsr setupdaddr

	lda #7 ; white
	jsr fill80

	ldx $5d
	rts

setcopy = *
	rts

saveattr = *
	stx $57
	sty $58
	ldy #0
-	lda under,y
	sta ($57),y
	iny
	cpy #6
	bne -
	lda rvs
	sta ($57),y
	iny
	lda 214
	sta ($57),y
	iny
	lda 211
	sta ($57),y
	rts

restattr = *
	stx $57
	sty $58
	ldy #0
-	lda ($57),y
	sta under,y
	iny
	cpy #6
	bne -
	lda ($57),y
	sta rvs
	iny
	lda ($57),y
	sta 214
	iny
	lda ($57),y
	sta 211
	jsr calcrsr
	jmp setattr

.tst "labels"
